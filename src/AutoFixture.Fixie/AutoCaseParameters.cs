using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using Ploeh.AutoFixture.Kernel;

namespace Ploeh.AutoFixture.Fixie
{
    public class AutoCaseParameters
    {
        private readonly IFixture _fixture;

        public AutoCaseParameters(IFixture fixture)
        {
            if (fixture == null)
            {
                throw new ArgumentNullException("fixture");
            }

            _fixture = fixture;
        }

        public AutoCaseParameters()
            : this(new Fixture())
        {
            
        }

        public IFixture Fixture
        {
            get { return _fixture; }
        }

        /// <summary>
        /// Returns the data to be used to test the testcase.
        /// </summary>
        /// <param name="method">The method that is being tested</param>
        /// <returns>The testcase data generated by <see cref="Fixture"/>.</returns>
        public IEnumerable<object[]> GetCaseParameters(MethodInfo method)
        {
            if (method == null)
            {
                throw new ArgumentNullException("method");
            }

            var dataAttribute = (DataAttribute)method.GetCustomAttributes(typeof(DataAttribute), true).FirstOrDefault();

            if (dataAttribute != null)
                return dataAttribute.GetData(method);

            var specimens = new List<object>();
            foreach (var p in method.GetParameters())
            {
                CustomizeFixture(p);

                var specimen = Resolve(p);
                specimens.Add(specimen);
            }

            return new[] { specimens.ToArray() };
        }

        private void CustomizeFixture(ParameterInfo p)
        {
            var dummy = false;
            var customizeAttributes = p.GetCustomAttributes(typeof(CustomizeAttribute), dummy).OfType<CustomizeAttribute>();
            foreach (var ca in customizeAttributes)
            {
                var c = ca.GetCustomization(p);
                Fixture.Customize(c);
            }
        }

        private object Resolve(ParameterInfo p)
        {
            var context = new SpecimenContext(Fixture);
            return context.Resolve(p);
        }

        private static IFixture CreateFixture(Type type)
        {
            if (type == null)
            {
                throw new ArgumentNullException("type");
            }

            if (!typeof(IFixture).IsAssignableFrom(type))
            {
                throw new ArgumentException(
                    string.Format(
                        CultureInfo.CurrentCulture,
                        "{0} is not compatible with IFixture. Please supply a Type which implements IFixture.",
                        type),
                    "type");
            }

            var ctor = type.GetConstructor(Type.EmptyTypes);
            if (ctor == null)
            {
                throw new ArgumentException(
                    string.Format(
                        CultureInfo.CurrentCulture,
                        "{0} has no default constructor. Please supply a a Type that implements IFixture and has a default constructor. Alternatively you can supply an IFixture instance through one of the AutoTestCaseAttribute constructor overloads. If used as an attribute, this can be done from a derived class.",
                        type),
                    "type");
            }

            return (IFixture)ctor.Invoke(null);
        }
    }
}